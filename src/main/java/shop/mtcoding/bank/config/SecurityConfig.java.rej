diff a/src/main/java/shop/mtcoding/bank/config/SecurityConfig.java b/src/main/java/shop/mtcoding/bank/config/SecurityConfig.java	(rejected hunks)
@@ -27,40 +21,10 @@
 	}
 
 	// JWT 서버를 만들 예정! Session 사용안 함.
-	@Bean
 	public SecurityFilterChain filerChain(HttpSecurity http) throws Exception {
 		http.headers().frameOptions().disable(); // iframe 허용안함
-		http.csrf().disable(); // csrf 허용안함 enable이면 post맨 작동안함.
+		http.csrf().disable(); // csrf 허용안함 //
 		// cors : js 허용을 안 하겠다.
 		http.cors().configurationSource(null); // cors 재정의
-
-		/*
-		 * SessionCreationPolicy.STATELESS 클라이언트가 로그인 request 서버는 User 세션 저장 서버가
-		 * response 세션값 사라짐. (즉 유지하지 않음)
-		 */
-		// jSessionId를 서버 쪽에서 관리 안 하겠다는 의미
-		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
-		http.formLogin().disable();
-		http.httpBasic().disable(); // httpBasic()은 브라우저가 팝업창을 이용해서 사용자 인증을 진행한다.
-
-		http.authorizeHttpRequests().antMatchers("/api/s/**").authenticated().antMatchers("/api/admin/**")
-				.hasRole("" + UserEnum.ADMIN) // ROLE_ 안붙여도 됨
-				.anyRequest().permitAll();
-
-		return http.build();
-	}
-
-	public CorsConfigurationSource configurationSource() {
-		log.debug("디버그 : SecurityConfig의 configurationSource");
-		
-		CorsConfiguration configuration = new CorsConfiguration();
-		configuration.addAllowedHeader("*");
-		configuration.addAllowedMethod("*");		
-		configuration.addAllowedOriginPattern("*"); // 프론트 서버의 주소 등록
-		configuration.setAllowCredentials(true); 	// 클라이언트에서 쿠키 요청 허용
-
-		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
-		source.registerCorsConfiguration("/**", configuration);
-		return source;
 	}
 }
